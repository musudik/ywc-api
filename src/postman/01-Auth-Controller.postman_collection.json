{
	"info": {
		"_postman_id": "auth-controller-ywc-api",
		"name": "YWC API - Auth Controller",
		"description": "Complete Authentication Controller testing with all CRUD operations for the YWC Financial Forms API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication Flow",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    ",
									"    if (response.data && response.data.token) {",
									"        pm.collectionVariables.set('authToken', response.data.token);",
									"        pm.collectionVariables.set('userId', response.data.user.id);",
									"        pm.collectionVariables.set('userRole', response.data.user.role);",
									"        console.log('Token saved:', response.data.token);",
									"        console.log('User ID:', response.data.user.id);",
									"        console.log('User Role:', response.data.user.role);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"coach@ywc.com\",\n  \"password\": \"coach123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration successful', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    ",
									"    if (response.data && response.data.user) {",
									"        pm.collectionVariables.set('newClientId', response.data.user.id);",
									"        console.log('New Client ID:', response.data.user.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newclient@example.com\",\n  \"password\": \"password123\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"role\": \"CLIENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Coach (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Coach registration by admin', function () {",
									"    if (pm.collectionVariables.get('userRole') === 'ADMIN') {",
									"        pm.response.to.have.status(201);",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.true;",
									"    } else {",
									"        pm.response.to.have.status(403);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newcoach@ywc.com\",\n  \"password\": \"coach123\",\n  \"first_name\": \"Sarah\",\n  \"last_name\": \"Johnson\",\n  \"role\": \"COACH\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Token Management",
			"item": [
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token refresh successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    ",
									"    if (response.data && response.data.token) {",
									"        pm.collectionVariables.set('authToken', response.data.token);",
									"        console.log('New token saved:', response.data.token);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{authToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Get My Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('email');",
									"    pm.expect(response.data).to.have.property('first_name');",
									"    pm.expect(response.data).to.have.property('last_name');",
									"    pm.expect(response.data).to.have.property('role');",
									"    console.log('Profile:', response.data);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Clients (Coach Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Clients retrieved successfully', function () {",
									"    if (pm.collectionVariables.get('userRole') === 'COACH' || pm.collectionVariables.get('userRole') === 'ADMIN') {",
									"        pm.response.to.have.status(200);",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.true;",
									"        console.log('My clients:', response.data);",
									"    } else {",
									"        pm.response.to.have.status(403);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me",
								"clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Management (Admin)",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Users retrieved successfully', function () {",
									"    if (pm.collectionVariables.get('userRole') === 'ADMIN') {",
									"        pm.response.to.have.status(200);",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.true;",
									"        console.log('All users:', response.data);",
									"    } else {",
									"        pm.response.to.have.status(403);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User retrieved successfully', function () {",
									"    if (pm.collectionVariables.get('userRole') === 'ADMIN') {",
									"        pm.response.to.have.status(200);",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.true;",
									"        console.log('User details:', response.data);",
									"    } else {",
									"        pm.response.to.have.status(403);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User updated successfully', function () {",
									"    if (pm.collectionVariables.get('userRole') === 'ADMIN') {",
									"        pm.response.to.have.status(200);",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.true;",
									"        console.log('Updated user:', response.data);",
									"    } else {",
									"        pm.response.to.have.status(403);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Updated\",\n  \"last_name\": \"Name\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/users/{{newClientId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{newClientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User deleted successfully', function () {",
									"    if (pm.collectionVariables.get('userRole') === 'ADMIN') {",
									"        pm.response.to.have.status(200);",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.true;",
									"        console.log('User deleted');",
									"    } else {",
									"        pm.response.to.have.status(403);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/users/{{newClientId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{newClientId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logout successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    ",
									"    // Clear the token after logout",
									"    pm.collectionVariables.set('authToken', '');",
									"    console.log('Logged out successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-login if no token exists",
					"if (!pm.collectionVariables.get('authToken')) {",
					"    console.log('No auth token found, will need to login first');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userRole",
			"value": "",
			"type": "string"
		},
		{
			"key": "newClientId",
			"value": "",
			"type": "string"
		}
	]
} 